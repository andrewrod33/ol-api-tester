#BEGIN HEADER

#IsDebugged False
#IsLocked True
#NameString Sys

#/*##################################/
# Sys, this is the first Module
# to be installed for using the Sys
# framework. This little piece of code
# just helps here to relocalize every
# customized written Modules in the
# <%Thing%>Sys (placed anywhere
# by the user) to be getted easily by the
# deep-installed Sys in
# the Python lib site-packages
#/##################################*/

#END HEADER

#BEGIN BODY

#/###################################/
#/#### Define Python Modules ########/
#/###################################/

import inspect
import importlib
import os
import re
import sys

#/###################################/
#/###### Define Functions  ##########/
#/###################################/

def getFolderPathString():
	'''
		Get the Name of the actual Script that is readed by Python
	'''
	"""
		#Print
		print(_.getFolderPathString())
	"""
	return '/'.join(inspect.currentframe().f_back.f_code.co_filename.split('/')[:-1])+"/"

for FileNameString in ["Functions","Class"]:
	execfile(getFolderPathString()+"Sources/Sys"+FileNameString+".py")

#/###################################/
#/## Set the Sys System #############/
#/###################################/

#/###################################/
#/ Wrap the Sys Module into a Object Class

#Get all the Attributes of the module
#SysAttributesDict=getAttributesDictWithModule(sys.modules['Sys']);

#The Sys Module becomes a Wrapped Class Instance and other Modules refers to this Wrapped Instance.
sys.modules['Sys']=SysClass(sys.modules['Sys'])

#Define a Shortcut for Sys
Sys=sys.modules['Sys']

#/###################################/
#/ Execute in the Sys Scope the Manager File
execfile(Sys.SysFolderPathString+"Modules/Manager/Manager.py",Sys.__dict__)

#END BODY
