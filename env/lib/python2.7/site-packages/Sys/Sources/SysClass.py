#/###################################/
#/#### Define Header Configs ########/
#/###################################/
'''
	Lock OrAnd Debug this Module
'''
"""/
	IsDebugged False
	IsLocked True
/"""

#/###################################/
#/#### Define the Readme Module######/
#/###################################/
'''
	Define here the Readme
'''
"""*
	This Sys Class helps to
	transforms the Sys Module into a
	Wrapped Instance Class that would
	manage Call of functions by Chasling
	Function Construction Names handlings
	and the Base/DefaultSpecific Dict
	management of each new defined object
*"""

#/###################################/
#/##### Define Class ################/
#/###################################/
'''
	Define here the Sys Class
'''
class SysClass(object):
	def __init__(self,_Module):
		'''
			Init an Object that Wrap an Instance (useful for Module) for setting it like a Class Instance
		'''
		"""
			#Print a Manager __dict__
			Manager=Sys.ManagerClass();
			print(Manager.__dict__);
		"""
		
		#/###################################/
		#/ Wrap
		
		#Wrap the Module
		self.Module=_Module;
		
		#Set a Pointer to itself
		self.Sys=self
		
		#/###################################/
		#/ Define the Sys Types
		
		#Define the Sys Types that are directed related with a Python Type
		self.TypeStringToPythonType=dict(map(lambda TypeString:(TypeString,TypeString[0].lower()+TypeString[1:]),["Class","Dict","Float","Function","Int","List","Module","Object"]));

		#Define the Relations between the SysTypes
		self.ParentTypeStringToChildTypeStringsListDict={
											'Dicter':["Dict","Instance"],
											'Instance':["Module","Class","Object"],
											'Object':["Node"],
											'Variable':["Dicter","Float","Int","List","String"]
										}

		#/###################################/
		#/ Define the PluralSingular Dict

		#Init the Singular to Plural ExceptionNames Dict
		self.PluralStringToSingularStringDict={}

		#/###################################/
		#/ Define the Bases Dict

		#Init the FirstBaseStringsDict
		self.NameStringToFirstBaseStringsListDict={}

		#Init the FirstBaseStringsDict
		self.NameStringToBaseStringsSetListDict={}

		#Init the TypeStringToDefaultDictDict
		self.NameStringToDefaultSpecificDictsDict={}

		#/###################################/
		#/ Define some PathStrings
		
		#The Personal 'MySys' Folder PathString
		self.SysFolderPathString=getSysFolderPathString()


	def __getattr__(self,_KeyString):
		
		#Get safely existing Values
		if hasattr(self.Module,_KeyString):
			return getattr(self.Module,_KeyString)
		
		else:
		
			#Decompose the _Key
			WordStringsList=getWordStringsListWithNameString(_KeyString)
		
			#Check that it is an Object query
			if WordStringsList[0][0]==WordStringsList[0][0].upper():
		
				#If it is a Dict/Class Query
				if WordStringsList[-1] in ["Class","Dict"]:
					return getattr(self,"get"+WordStringsList[-1]+"WithNameString")(''.join(WordStringsList[:-1]))



