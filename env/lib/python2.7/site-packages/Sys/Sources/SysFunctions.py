#/###################################/
#/#### Define Header Configs ########/
#/###################################/
'''
	Lock OrAnd Debug this Module
'''
"""/
	IsDebugged False
	IsLocked True
/"""

#/###################################/
#/#### Define the Readme Module######/
#/###################################/
'''
	Define here the Readme
'''
"""*
	The Sys functions helps to transform
	the Sys modules into a "smart" Class
	instance that stores all the other
	functions/class definition during
	the use and manage the Base/Parent
	to Child Structure relations
*"""

#/###################################/
#/###### Define Functions  ##########/
#/###################################/

#/###################################/
#/ HubScripts Handling Functions

def getWordStringsListWithNameString(_NameString):
	'''
		Split a String into its Words
	'''
	"""
		#Print some examples
		print("The Words in the String SuperMan are :"+str(Sys.getWordStringsListWithNameString("SuperMan")));
		print("The Words in the String \"FeelLike-A-RainBow\" are :"+str(Sys.getWordStringsListWithNameString("FeelLike-A-RainBow")));
	"""
	return filter(None, re.split("([A-Z][^A-Z]*)",_NameString));

def getSysFolderPathString():
	'''
		Get the SysFolderPathString from the os cwd
	'''
	"""
		#Print the SysFolderPathString
		print("The SysFolder is at : "+Sys.getSysFolderPathString())
	"""
	
	#Get the cwd
	CurrentWorkDirectoryPathString=os.getcwd()
	
	#Get the FolderStringsList
	FolderStringsList=CurrentWorkDirectoryPathString.split('/')
	
	#Init SysFolderPathString
	SysFolderPathString=""
	
	#Scan each FolderPathString and find the one with "Sys" in the end
	for FolderString in FolderStringsList:
		SysFolderPathString+=FolderString+"/";
		WordStringsList=filter(None, re.split("([A-Z][^A-Z]*)",FolderString))
		if len(WordStringsList)>0:
			if WordStringsList[-1]=="Sys":
				break;

	#Return
	return SysFolderPathString

def getNameString():
	'''
		Get the Name of the actual Script that is readed by Python
	'''
	"""
		#Print
		print(Sys.getNameString())
	"""
	
	return inspect.currentframe().f_back.f_code.co_filename.split('/')[-1].replace(".py","")

def getSortedLocalStringsListWithPathString(_PathString):
	'''
		Get the SortedLocalStringsList WithPathString
	'''
	"""
		#Print the sorted Dirs in the Sys Lib directory
		print(Sys.getSortedLocalStringsListWithPathString(Sys.LocalSourcesFolderPathString))
	"""
	
	#Scan the Folders
	if os.path.isdir(_PathString):
		return map(lambda Item:Item[1],sorted(filter(lambda Item:Item[0].isdigit(),map(lambda DirName: (DirName.split("_")[0],DirName),os.listdir(_PathString))),key=lambda x:int(x[0])))
	else:
		return []

def executeSortedScriptsWithSourcesPathStringAndLocalDict(_SourcesPathString,_LocalDict=None):
	'''
		Execute the Scripts in the Source Dir and set 
		the function definitions on the specified Scope
	'''
	"""
		#Execute the Scripts in the Sys Sources Module
		executeSortedScriptsWithSourcesPathStringAndScopingModule(Sys.SysFolderPathString+"Modules/Base/",_)
	"""
	
	#Execute the sorted Scripts in the _Scope
	for _DirName in getSortedLocalStringsListWithPathString(_SourcesPathString):
		_DirPathString=_SourcesPathString+_DirName+"/"
		if os.path.isdir(_DirPathString):
			_DirNameSplit=_DirName.split("_")
			if len(_DirNameSplit)>1:
				_ScriptPathString=_DirPathString+_DirNameSplit[1]+".py"
				if os.path.isfile(_ScriptPathString):
					if _LocalDict!=None:
						execfile(_ScriptPathString,_LocalDict)
					else:
						execfile(_ScriptPathString)

#/###################################/
#/ IntricatingLists Handling Functions

def getLocalDictWithKwargsAndDefaultItemsDict(_Kwargs,_DefaultItemsDict):
	'''
		Filter a Kwargs dict with Default possible Items
	'''
	"""
		#Define a Kwargs
		Kwargs={'Thing':0,'Stuff':1}
		
		#Define a DefaultItemsDict
		DefaultItemsDict={'Thing':None,'OtherStuff':0}
		
		#Get the LocalDict
		print(Sys.getLocalDictWithKwargsAndDefaultItemsDict(Kwargs,DefaultItemsDict))
	"""
	
	#Init skeleton
	LocalDict={};
	
	#Accumulate Kwargs
	for Key,DefaultValue in _DefaultItemsDict.items():
		LocalDict[Key]=_Kwargs[Key] if Key in _Kwargs else DefaultValue
	
	#Return
	return LocalDict

def getChildStringsListWithParentStringToChildStringsListDictAndParentString(_ParentStringToChildStringsListDict,_ParentString,**Kwargs):
	'''
		Get all the repeated BaseNames but aligned...... in one dimension
	'''
	"""
		#Invent Fictif relationships
		Sys.DictionnaryFirstBaseStringsList=["Sys"];
		Sys.ParentFirstBaseStringsList=["Dictionnary"];
		Sys.DirFirstBaseStringsList=["Sys"];
		Sys.ScriptFirstBaseStringsList=["Dir","Parent"];

		#Print the BasesList of the Script Object
		print("BaseStringsList of the Script is : "+str(Sys.getBaseStringsListWithString("Script")));
	"""
	
	#Set possible default local Items
	LocalDict=getLocalDictWithKwargsAndDefaultItemsDict(Kwargs,
				{
					'ChildStringsList':[],
				 }
				);
	
	#Look if there is this Key in this layer
	if _ParentString in _ParentStringToChildStringsListDict:
		
		#Add to the 'ChildStringsList'
		LocalDict['ChildStringsList']+=_ParentStringToChildStringsListDict[_ParentString]
	
		#Look to younger Children
		for ChildStringInt in xrange(len(_ParentStringToChildStringsListDict[_ParentString])):
		
			#Define the ChildString
			ChildString=_ParentStringToChildStringsListDict[_ParentString][ChildStringInt]
		
			#If this Children have also Children
			if ChildString in _ParentStringToChildStringsListDict:
			
				#Recursive Call
				LocalDict['ChildStringsList']+=getChildStringsListWithParentStringToChildStringsListDictAndParentString(_ParentStringToChildStringsListDict,ChildString)

	#Return the cumulated BaseNames
	return LocalDict['ChildStringsList'];

def getChildStringsSetListWithParentStringToChildStringsListDictAndStringAndParentString(_ParentStringToChildStringsListDict,_ParentString):
	'''
		Get the set of Bases from the list
	'''
	"""
		#Invent Fictif relationships
		Sys.DictionnaryFirstBaseStringsList=["Sys"];
		Sys.ParentFirstBaseStringsList=["Dictionnary"];
		Sys.DirFirstBaseStringsList=["Sys"];
		Sys.ScriptFirstBaseStringsList=["Dir","Parent"];

		#Print the BaseStringsOrderedSet of the Script Object
		print("BaseStringsOrderedSet of the Script is : "+str(Sys.getBaseStringsOrderedSetWithString("Script")));
	"""
	
	#Get the BaseNamesList
	ChildStringsList=getChildStringsListWithParentStringToChildStringsListDictAndParentString(_ParentStringToChildStringsListDict,_ParentString);
	
	#Init the BasesOrderSet
	ChildStringsSetList=[];
	
	#Scan among the Children
	for ChildString in ChildStringsList:
		if ChildString in ChildStringsSetList:
		
			#Get the Idx
			ChildInt=ChildStringsSetList.index(ChildString);
			
			#Delete at this Idx
			ChildStringsSetList.pop(ChildInt);
			
		#Put it in last
		ChildStringsSetList.append(ChildString);

	#Return
	return ChildStringsSetList;

def getChildStringsDictWithParentStringToChildStringsListDictAndParentString(_ParentStringToChildStringsListDict,_ParentString,**Kwargs):
	'''
		Get all the Children with a Dict hierarchy
	'''
	"""
		#Print the ParentTypeStringToChildTypeStringsListDict
		print("ParentTypeStringToChildTypeStringsListDict is :");
		print(Sys.ParentTypeStringToChildTypeStringsListDict);

		#Print the Listed Children
		print("\nListed Children are : ");
		print(Sys.getChildStringsListWithParentStringToChildStringsListDictAndString(Sys.ParentTypeStringToChildTypeStringsListDict,'Variable'));
	"""
	
	#Set possible default local Items
	LocalDict=getLocalDictWithKwargsAndDefaultItemsDict(Kwargs,
				{
					'ChildStringsDict':[],
				 }
				);
	
	#Look if there is this Key in this layer
	if _ParentString in _ParentStringToChildStringsListDict:
		
		#Add to the 'ChildStringsList'
		LocalDict['ChildStringsDict']+=_ParentStringToChildStringsListDict[_ParentString]
	
		#Look to younger Children
		for ChildStringInt in xrange(len(_ParentStringToChildStringsListDict[_ParentString])):
		
			#Define the ChildString
			ChildString=_ParentStringToChildStringsListDict[_ParentString][ChildStringInt]
		
			#If this Children have also Children
			if ChildString in _ParentStringToChildStringsListDict:
			
				#Recursive Call
				LocalDict['ChildStringsDict'][ChildStringInt]=dict([(ChildString,getChildStringsDictWithParentStringToChildStringsListDictAndParentString(_ParentStringToChildStringsListDict,ChildString))]);

	#Return the cumulated BaseNames
	return LocalDict['ChildStringsDict'];

#/###################################/
#/ Load Module Handling Functions

def getFolderStringWithNameString(_NameString):
	'''
		Get the Folder With the String (should be identical)
	'''
	"""
		#Print FolderString of the NameString Functor
		print("FolderString of \"Functor\" is : "+ Sys.getFolderStringWithNameString("Functor"));
	"""
	return _NameString;

def getFolderedPathString(_PathString):
	'''
		Get a PathSlah with a / in the end
	'''
	"""
		#Examples
		print("PathString \"Lib/Functor\" becomes : "+Sys.getFolderedPathString("Functor"));
		print("PathString \"Lib/Functor/\" becomes : "+Sys.getFolderedPathString("Functor/"));
	"""

	if _PathString[-1]=="/":
		return _PathString;
	else:
		return _PathString+"/";

def getFolderPathStringWithNameString(_NameString=None,**Kwargs):
	'''
		Given a String, return the FolderPathString
	'''
	"""
		#First example
		print("Functor Folder is at :");
		print(Sys.getFolderPathStringWithNameString("Functor"));

		#Second example
		print("\nKwargs Folder is at :");
		print(Sys.getFolderPathStringWithNameString("Kwargs"));
	"""
	
	#Debug
	#sys.modules['SysPyModule'].printDebug('Start');
	
	#Set DefaultItems
	LocalDict=Sys.getLocalDictWithKwargsAndDefaultItemsDict(Kwargs,
				{
					'ParentFolderPathString':Sys.SysFolderPathString+"Modules/"
				}
				);
	
	#Get the FolderString
	FolderString=Sys.getFolderStringWithNameString(_NameString);
	
	#Init FolderPathString
	FolderPathString=None;

	#Search in the Dir
	for ParentFolderPathString, ChildFolderStringsList, ChildFileStringsList in os.walk(LocalDict['ParentFolderPathString']):
		if FolderString not in ChildFolderStringsList:
			for ChildFolderString in ChildFolderStringsList:
				Sys.getFolderPathStringWithNameString(_NameString,**{'ParentFolderPathString':getFolderedPathString(LocalDict['ParentFolderPathString'])+ChildFolderString+"/"});
		else:
			return Sys.getFolderedPathString(ParentFolderPathString)+FolderString+"/";

def loadModuleWithNameString(_NameString):
	'''
		Load a Module and execute the Scripts inside
	'''
	"""
		#Load the module Node
		Sys.loadModuleWithNameString("Node");
	"""
	
	#Get the associated FolderPathString
	FolderPathString=getFolderPathStringWithNameString(_NameString)
	
	#Check it exists
	if FolderPathString!=None:
		
		#Get the associated ScriptPathString
		ScriptPathString=FolderPathString+_NameString+".py"
		
		#If the Script exists, execute
		if os.path.isfile(ScriptPathString):
			execfile(ScriptPathString,Sys.__dict__)

#/###################################/
#/ DefaultDicts Handling Functions

def getBaseStringsSetListWithTypeString(_TypeString):
	'''
		Get the distincited ordered Base that define an Object
	'''
	"""
		#Invent Fictif relationships
		Sys.NameStringToFirstBaseStringsListDict["Foo"]=[];
		Sys.NameStringToFirstBaseStringsListDict["Thing"]=["Foo"];
		Sys.NameStringToFirstBaseStringsListDict["MiniStuff"]=["Stuff","Foo"];
		Sys.NameStringToFirstBaseStringsListDict["Box"]=["Thing","MiniStuff"];

		#Print the BaseStringsOrderedSet of the Box Object
		print("BaseStringsOrderedSet of the Box Object is : ");
		print(Sys.getBaseStringsSetListWithTypeString("Box"));
	"""
	return getChildStringsSetListWithParentStringToChildStringsListDictAndStringAndParentString(Sys.NameStringToFirstBaseStringsListDict,_TypeString);

def addNameStringAndFirstBaseStringsListItem(_NameStringAndBaseStringsItem):
	'''
		Update the NameStringToFirstBaseStringsListDict and bind also the update of
		the NameStringToBaseStringsSetListDict
	'''
	"""
		#Add Fictif relationships
		Sys.addNameStringAndFirstBaseStringsListItem(("Foo",[]));
		Sys.addNameStringAndFirstBaseStringsListItem(("Thing",["Foo"]));
		Sys.addNameStringAndFirstBaseStringsListItem(("MiniStuff",["Stuff","Foo"]));
		Sys.addNameStringAndFirstBaseStringsListItem(("Box",["Thing","MiniStuff"]));

		#Print the automatic binded NameStringToBaseStringsSetListDict
		print("NameStringToBaseStringsSetListDict is :");
		print(Sys.NameStringToBaseStringsSetListDict);
	"""
	
	#Update the NameStringToFirstBaseStringsListDict
	Sys.NameStringToFirstBaseStringsListDict.update(dict([_NameStringAndBaseStringsItem]))

	#Update the NameStringToFirstBaseStringsListDict
	Sys.NameStringToBaseStringsSetListDict.update(dict([(_NameStringAndBaseStringsItem[0],getBaseStringsSetListWithTypeString(_NameStringAndBaseStringsItem[0]))]))

	#Init a DefaultDict
	Sys.NameStringToDefaultSpecificDictsDict.update(dict([(_NameStringAndBaseStringsItem[0],{})]))

	#setattr(Sys,_NameStringAndBaseStringsItem[0]+'Class')

def getDefaultDictWithDefaultSpecificDictAndBaseStringsSetList(_DefaultSpecificDict,_BaseStringsSetList):
	'''
		Get the Default Dict given a Specific Dict and a BaseStringsSetList
	'''
	"""
		#Add Fictif relationships
		Sys.addNameStringAndFirstBaseStringsListItem(("Foo",[]));
		Sys.addNameStringAndFirstBaseStringsListItem(("Thing",["Foo"]));
		Sys.addNameStringAndFirstBaseStringsListItem(("MiniStuff",["Stuff","Foo"]));
		Sys.addNameStringAndFirstBaseStringsListItem(("Box",["Thing","Foo"]));

		#Invent Fictif DefaultSpecificDict
		Sys.NameStringToDefaultSpecificDictsDict["Foo"]={
															 'WelcomeString':"Hello World!"
														};
		Sys.NameStringToDefaultSpecificDictsDict["Thing"]={
															 'Foo':{},
															 'Int':0,
															 "TheList":[]
														};
		Sys.NameStringToDefaultSpecificDictsDict["MiniStuff"]={
															 'Float':2.5,
															 "ColorString":"Green"
														};
		Sys.NameStringToDefaultSpecificDictsDict["Box"]={
															 'KeyString':"ABC",
															 'MiniStuff':{}
														};

		#Print the Total Default Dict just
		print("The Box Default Dict is : ")
		print(Sys.getDefaultDictWithDefaultSpecificDictAndBaseStringsSetList(
								 Sys.NameStringToDefaultSpecificDictsDict['Box'],
								 Sys.getChildStringsSetListWithParentStringToChildStringsListDictAndStringAndParentString(Sys.NameStringToFirstBaseStringsListDict,"Box"))
																			)
	"""
	
	#Init the DefaultDict
	DefaultDict={};
	
	#Get the BaseDicts if _IsBased
	for BaseString in _BaseStringsSetList:
	
		#Check that the Base was already imported
		if (BaseString not in Sys.NameStringToFirstBaseStringsListDict) or (BaseString not in Sys.NameStringToBaseStringsSetListDict) or (BaseString not in Sys.NameStringToDefaultSpecificDictsDict):
			loadModuleWithNameString(BaseString)
		
		#Update the Dict
		if (BaseString in Sys.NameStringToFirstBaseStringsListDict) and (BaseString in Sys.NameStringToBaseStringsSetListDict) and (BaseString in Sys.NameStringToDefaultSpecificDictsDict):
			DefaultDict.update(Sys.NameStringToDefaultSpecificDictsDict[BaseString])

	#Add Specific Attributes from the _DefaultDict
	DefaultDict.update(_DefaultSpecificDict);

	#Return the Dict
	return DefaultDict;

def getDefaultDictWithNameString(_NameString):
	'''
		Get the Default Dict of one particular Object
	'''
	"""
		#Add Fictif relationships
		Sys.addNameStringAndFirstBaseStringsItem(("Foo",[]));
		Sys.addNameStringAndFirstBaseStringsItem(("Thing",["Foo"]));
		Sys.addNameStringAndFirstBaseStringsItem(("MiniStuff",["Stuff","Foo"]));
		Sys.addNameStringAndFirstBaseStringsItem(("Box",["Thing","Foo"]));

		#Invent Fictif DefaultSpecificDict
		Sys.NameStringToDefaultSpecificDictsDict["Foo"]={
															 'WelcomeString':"Hello World!"
														};
		Sys.NameStringToDefaultSpecificDictsDict["Thing"]={
															 'Foo':{},
															 'Int':0,
															 "TheList":[]
														};
		Sys.NameStringToDefaultSpecificDictsDict["MiniStuff"]={
															 'Float':2.5,
															 "ColorString":"Green"
														};
		Sys.NameStringToDefaultSpecificDictsDict["Box"]={
															 'KeyString':"ABC",
															 'MyMiniStuff':Sys.getDefaultDictWithNameString("MiniStuff")
														};

		#Print the Total Default Dict just
		print("The Box Default Dict is : ");
		print(Sys.getDefaultDictWithNameString("Box"));
	"""
	
	if all(map(lambda Dict:_NameString in Dict,[Sys.NameStringToDefaultSpecificDictsDict,Sys.NameStringToBaseStringsSetListDict])):
		return Sys.getDefaultDictWithDefaultSpecificDictAndBaseStringsSetList(
			Sys.NameStringToDefaultSpecificDictsDict[_NameString],
			Sys.NameStringToBaseStringsSetListDict[_NameString])
	else:
		return {}

#/###################################/
#/ Class/Object/Dict Calling Handling Functions

def getClassWithNameString(_NameString):
	'''
		Get a Class of a certain Module (load it if not already)
	'''
	"""
		#Get the NodeClass
		NodeClass=Sys.getClassWithNameString("Class")
		
		#Print the Node Class
		print("NodeClass is : ");
		print(NodeClass);
	"""
	
	#Check that there is a Class
	ClassString=_NameString+'Class'
	
	#Check that it is already there
	if hasattr(Sys,ClassString)==False:
	
		#Get the associated FolderPathString
		FolderPathString=getFolderPathStringWithNameString(_NameString)
		
		#Load the module
		loadModuleWithNameString(_NameString)
		
	#Return whatever
	return getattr(Sys,ClassString)

def getDictWithNameString(_NameString):
	'''
		Get a Dict of a certain Module (load it if not already)
	'''
	"""
		#Get the NodeDict
		NodeDict=Sys.getDictWithNameString("Class")
		
		#Print the Node Dict
		print("NodeDict is : ");
		print(NodeDict);
	"""
	if _NameString not in Sys.NameStringToDefaultSpecificDictsDict:
	
		#Load the module
		loadModuleWithNameString(_NameString)
	
	#Return
	return getDefaultDictWithNameString(_NameString)